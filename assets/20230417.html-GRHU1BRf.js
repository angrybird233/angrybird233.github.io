import{_ as s,o as n,c as a,e}from"./app-BwH9FXqg.js";const p={},t=e(`<p>在 TypeScript 中，类型体操是使用高级类型系统功能进行类型处理和转换的一种技巧。以下是一些常用的类型体操技巧，包括详细说明和示例：</p><h3 id="_1-类型别名-type-aliases" tabindex="-1"><a class="header-anchor" href="#_1-类型别名-type-aliases"><span>1. 类型别名（Type Aliases）</span></a></h3><p>类型别名用于为类型创建新的名称。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Point</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> p<span class="token operator">:</span> Point <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-联合类型-union-types" tabindex="-1"><a class="header-anchor" href="#_2-联合类型-union-types"><span>2. 联合类型（Union Types）</span></a></h3><p>联合类型允许一个变量可以是几种类型之一。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">ID</span></span> <span class="token operator">=</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> userId<span class="token operator">:</span> <span class="token constant">ID</span><span class="token punctuation">;</span></span>
<span class="line">userId <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span></span>
<span class="line">userId <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-交叉类型-intersection-types" tabindex="-1"><a class="header-anchor" href="#_3-交叉类型-intersection-types"><span>3. 交叉类型（Intersection Types）</span></a></h3><p>交叉类型将多个类型合并为一个类型。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Name</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  firstName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  lastName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Address</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  city<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  country<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Person</span> <span class="token operator">=</span> Name <span class="token operator">&amp;</span> Address<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> person<span class="token operator">:</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  firstName<span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  lastName<span class="token operator">:</span> <span class="token string">&quot;Doe&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  city<span class="token operator">:</span> <span class="token string">&quot;New York&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  country<span class="token operator">:</span> <span class="token string">&quot;USA&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-条件类型-conditional-types" tabindex="-1"><a class="header-anchor" href="#_4-条件类型-conditional-types"><span>4. 条件类型（Conditional Types）</span></a></h3><p>条件类型根据某个条件选择一种类型。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">IsString<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span> <span class="token operator">?</span> <span class="token string">&quot;yes&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;no&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> IsString<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>  <span class="token comment">// &quot;yes&quot;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token operator">=</span> IsString<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>  <span class="token comment">// &quot;no&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-映射类型-mapped-types" tabindex="-1"><a class="header-anchor" href="#_5-映射类型-mapped-types"><span>5. 映射类型（Mapped Types）</span></a></h3><p>映射类型根据旧类型创建新类型。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Readonly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Point</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> p<span class="token operator">:</span> Readonly<span class="token operator">&lt;</span>Point<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// p.x = 30; // Error: cannot assign to &#39;x&#39; because it is a read-only property</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-索引类型-index-types" tabindex="-1"><a class="header-anchor" href="#_6-索引类型-index-types"><span>6. 索引类型（Index Types）</span></a></h3><p>索引类型用于访问类型的属性。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Person</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">NameType</span> <span class="token operator">=</span> Person<span class="token punctuation">[</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// string</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-元组类型-tuple-types" tabindex="-1"><a class="header-anchor" href="#_7-元组类型-tuple-types"><span>7. 元组类型（Tuple Types）</span></a></h3><p>元组类型用于表示固定数量的不同类型的元素。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Tuple</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> tuple<span class="token operator">:</span> Tuple <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-类型推断-type-inference" tabindex="-1"><a class="header-anchor" href="#_8-类型推断-type-inference"><span>8. 类型推断（Type Inference）</span></a></h3><p>TypeScript 会根据代码自动推断类型。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment">// x is inferred as number</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_9-泛型-generics" tabindex="-1"><a class="header-anchor" href="#_9-泛型-generics"><span>9. 泛型（Generics）</span></a></h3><p>泛型使得函数、接口或类能够处理多种类型。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">identity</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> arg<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token generic-function"><span class="token function">identity</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token generic-function"><span class="token function">identity</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-实用类型-utility-types" tabindex="-1"><a class="header-anchor" href="#_10-实用类型-utility-types"><span>10. 实用类型（Utility Types）</span></a></h3><p>TypeScript 提供了一些内置的实用类型，如 <code>Partial</code>、<code>Pick</code>、<code>Omit</code> 等。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Person</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  address<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">PartialPerson</span> <span class="token operator">=</span> Partial<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span><span class="token punctuation">;</span>  <span class="token comment">// All properties are optional</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">NameAndAge</span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span>Person<span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;age&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>  <span class="token comment">// Only name and age</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">PersonWithoutAddress</span> <span class="token operator">=</span> Omit<span class="token operator">&lt;</span>Person<span class="token punctuation">,</span> <span class="token string">&quot;address&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>  <span class="token comment">// All except address</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11-递归类型-recursive-types" tabindex="-1"><a class="header-anchor" href="#_11-递归类型-recursive-types"><span>11. 递归类型（Recursive Types）</span></a></h3><p>递归类型用于表示嵌套结构或无限深度的数据结构。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">NestedObject</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  children<span class="token operator">?</span><span class="token operator">:</span> NestedObject<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> example<span class="token operator">:</span> NestedObject <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  value<span class="token operator">:</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  children<span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      value<span class="token operator">:</span> <span class="token string">&quot;child1&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      children<span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token string">&quot;child1.1&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token string">&quot;child1.2&quot;</span> <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token string">&quot;child2&quot;</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-深度只读类型-deepreadonly" tabindex="-1"><a class="header-anchor" href="#_12-深度只读类型-deepreadonly"><span>12. 深度只读类型（DeepReadonly）</span></a></h3><p>通过递归将对象的每一层都设为只读。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">DeepReadonly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> DeepReadonly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">ExampleObject</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  a<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    b<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      c<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> example<span class="token operator">:</span> DeepReadonly<span class="token operator">&lt;</span>ExampleObject<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  a<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    b<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      c<span class="token operator">:</span> <span class="token string">&quot;value&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,37),l=[t];function o(c,i){return n(),a("div",null,l)}const u=s(p,[["render",o],["__file","20230417.html.vue"]]),d=JSON.parse('{"path":"/blogs/Frontend/20230417.html","title":"typescript类型体操","lang":"en-US","frontmatter":{"title":"typescript类型体操","date":"2023-04-17T00:00:00.000Z","author":"angrybird233","tags":["Typescript"],"categories":["Frontend"]},"headers":[{"level":3,"title":"1. 类型别名（Type Aliases）","slug":"_1-类型别名-type-aliases","link":"#_1-类型别名-type-aliases","children":[]},{"level":3,"title":"2. 联合类型（Union Types）","slug":"_2-联合类型-union-types","link":"#_2-联合类型-union-types","children":[]},{"level":3,"title":"3. 交叉类型（Intersection Types）","slug":"_3-交叉类型-intersection-types","link":"#_3-交叉类型-intersection-types","children":[]},{"level":3,"title":"4. 条件类型（Conditional Types）","slug":"_4-条件类型-conditional-types","link":"#_4-条件类型-conditional-types","children":[]},{"level":3,"title":"5. 映射类型（Mapped Types）","slug":"_5-映射类型-mapped-types","link":"#_5-映射类型-mapped-types","children":[]},{"level":3,"title":"6. 索引类型（Index Types）","slug":"_6-索引类型-index-types","link":"#_6-索引类型-index-types","children":[]},{"level":3,"title":"7. 元组类型（Tuple Types）","slug":"_7-元组类型-tuple-types","link":"#_7-元组类型-tuple-types","children":[]},{"level":3,"title":"8. 类型推断（Type Inference）","slug":"_8-类型推断-type-inference","link":"#_8-类型推断-type-inference","children":[]},{"level":3,"title":"9. 泛型（Generics）","slug":"_9-泛型-generics","link":"#_9-泛型-generics","children":[]},{"level":3,"title":"10. 实用类型（Utility Types）","slug":"_10-实用类型-utility-types","link":"#_10-实用类型-utility-types","children":[]},{"level":3,"title":"11. 递归类型（Recursive Types）","slug":"_11-递归类型-recursive-types","link":"#_11-递归类型-recursive-types","children":[]},{"level":3,"title":"12. 深度只读类型（DeepReadonly）","slug":"_12-深度只读类型-deepreadonly","link":"#_12-深度只读类型-deepreadonly","children":[]}],"git":{"createdTime":1730194423000,"updatedTime":1730194423000,"contributors":[{"name":"wanggang","email":"wanggang@shouyinongye.com","commits":1}]},"filePathRelative":"blogs/Frontend/20230417.md"}');export{u as comp,d as data};
