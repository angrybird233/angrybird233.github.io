import{_ as s,c as a,b as t,o as e}from"./app-D0wlB8dq.js";const p="/assets/performance-BXGgyYwh.png",o={};function c(i,n){return e(),a("div",null,n[0]||(n[0]=[t('<h2 id="performance-api简介" tabindex="-1"><a class="header-anchor" href="#performance-api简介"><span>Performance API简介</span></a></h2><ul><li><p>Performance API是什么？</p><p>衡量和分析各种性能指标对于确保 web 应用的速度非常重要。Performance API 提供了重要的内置指标，并能够将你自己的测量结果添加到浏览器的性能时间线（performance timeline）中。性能时间线使用高精度的时间戳，且可以在开发者工具中显示。你还可以将相关数据发送到用于分析的端点，以根据时间记录性能指标。</p></li><li><p>Performance API的作用和优势</p><ul><li><p><em>1. 提供详细的性能信息</em>：Performance API不仅提供了页面加载时间等基本信息，还提供了更详细的性能数据，如各个阶段的开始和结束时间、资源加载时间、事件处理时间等。这些详细信息可以帮助开发者更准确地分析和定位性能问题。</p></li><li><p><em>2. 支持多种性能指标</em>：Performance API支持多种常用的性能指标，如页面加载时间、资源加载时间、重定向次数、DNS解析耗时等。这些指标可以帮助开发者全面评估网页的性能，并进行有针对性的优化。</p></li><li><p><em>3. 可以与其他API集成</em>：Performance API可以与其他API集成使用，如Navigation Timing API、Resource Timing API等。通过结合使用不同的API，开发者可以获取更全面和准确的性能数据，并进行更深入的分析和优化。</p></li><li><p><em>4. 提升用户体验</em>：通过使用Performance API来优化网页性能，可以提升用户的体验。快速加载的网页可以减少用户等待时间，流畅的交互性能可以提高用户的操作体验，从而增加用户的满意度和留存率。</p></li></ul></li></ul><h2 id="window-performance" tabindex="-1"><a class="header-anchor" href="#window-performance"><span>window.performance</span></a></h2><p><strong>performance.timing字段介绍</strong><img src="'+p+`" alt="image.png"></p><table><thead><tr><th>navigationStart</th><th>初始化页面，在同一个浏览器上下文中前一个页面unload的时间戳，如果没有前一个页面的unload,则与fetchStart值相等</th></tr></thead><tbody><tr><td>redirectStart</td><td>第一个HTTP重定向发生的时间,有跳转且是同域的重定向,否则为0</td></tr><tr><td>redirectEnd</td><td>最后一个重定向完成时的时间,否则为0</td></tr><tr><td>fetchStart</td><td>浏览器准备好使用http请求获取文档的时间,这发生在检查缓存之前</td></tr><tr><td>domainLookupStart</td><td>DNS域名开始查询的时间,如果有本地的缓存或keep-alive则时间为0</td></tr><tr><td>domainLookupEnd</td><td>DNS域名结束查询的时间</td></tr><tr><td>connectStart</td><td>TCP开始建立连接的时间,如果是持久连接,则与fetchStart值相等</td></tr><tr><td>secureConnectionStart</td><td>https 连接开始的时间,如果不是安全连接则为0</td></tr><tr><td>connectEnd</td><td>TCP完成握手的时间，如果是持久连接则与fetchStart值相等</td></tr><tr><td>requestStart</td><td>HTTP请求读取真实文档开始的时间,包括从本地缓存读取</td></tr><tr><td>requestEnd</td><td>HTTP请求读取真实文档结束的时间,包括从本地缓存读取</td></tr><tr><td>responseStart</td><td>返回浏览器从服务器收到（或从本地缓存读取）第一个字节时的Unix毫秒时间戳</td></tr><tr><td>responseEnd</td><td>返回浏览器从服务器收到（或从本地缓存读取，或从本地资源读取）最后一个字节时的Unix毫秒时间戳</td></tr><tr><td>unloadEventStart</td><td>前一个页面的unload的时间戳 如果没有则为0</td></tr><tr><td>unloadEventEnd</td><td>与unloadEventStart相对应，返回的是unload函数执行完成的时间戳</td></tr><tr><td>domLoading</td><td>返回当前网页DOM结构开始解析时的时间戳,此时document.readyState变成loading,并将抛出readyStateChange事件</td></tr><tr><td>domInteractive</td><td>返回当前网页DOM结构结束解析、开始加载内嵌资源时时间戳,document.readyState 变成interactive，并将抛出readyStateChange事件(注意只是DOM树解析完成,这时候并没有开始加载网页内的资源)</td></tr><tr><td>domContentLoadedEventStart</td><td>网页domContentLoaded事件发生的时间</td></tr><tr><td>domContentLoadedEventEnd</td><td>网页domContentLoaded事件脚本执行完毕的时间,domReady的时间</td></tr><tr><td>domComplete</td><td>DOM树解析完成,且资源也准备就绪的时间,document.readyState变成complete.并将抛出readystatechange事件</td></tr><tr><td>loadEventStart</td><td>load 事件发送给文档，也即load回调函数开始执行的时间</td></tr><tr><td>loadEventEnd</td><td>load回调函数执行完成的时间</td></tr></tbody></table><p><strong>1. Performance接口\`</strong></p><ul><li>获取页面加载时间</li><li>获取页面资源加载时间</li></ul><p>使用示例：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">\`// 获取页面加载时间</span>
<span class="line">const loadTime = window.performance.timing.loadEventEnd - window.performance.timing.navigationStart;</span>
<span class="line">console.log(&#39;页面加载时间：&#39;, loadTime);</span>
<span class="line"></span>
<span class="line">// 获取资源加载时间</span>
<span class="line">const resources = window.performance.getEntriesByType(&#39;resource&#39;);</span>
<span class="line">resources.forEach(resource =&gt; {</span>
<span class="line"> console.log(&#39;资源URL:&#39;, resource.name);</span>
<span class="line"> console.log(&#39;资源加载时间:&#39;, resource.duration);</span>
<span class="line">}); </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. PerformanceTiming接口\`</strong></p><p>PerformanceTiming接口提供了更详细的页面加载时间信息，包括各个阶段的开始和结束时间。它是Performance API中用于测量页面性能的重要接口。</p><ul><li>获取重定向耗时</li><li>获取DNS解析耗时</li><li>获取TCP连接耗时</li></ul><p>使用示例：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> timing <span class="token operator">=</span> window<span class="token punctuation">.</span>performance<span class="token punctuation">.</span>timing<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> redirectTime <span class="token operator">=</span> timing<span class="token punctuation">.</span>redirectEnd <span class="token operator">-</span> timing<span class="token punctuation">.</span>redirectStart<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> dnsTime <span class="token operator">=</span> timing<span class="token punctuation">.</span>domainLookupEnd <span class="token operator">-</span> timing<span class="token punctuation">.</span>domainLookupStart<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> tcpTime <span class="token operator">=</span> timing<span class="token punctuation">.</span>connectEnd <span class="token operator">-</span> timing<span class="token punctuation">.</span>connectStart<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;重定向耗时：&#39;</span><span class="token punctuation">,</span> redirectTime<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;DNS解析耗时：&#39;</span><span class="token punctuation">,</span> dnsTime<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;TCP连接耗时：&#39;</span><span class="token punctuation">,</span> tcpTime<span class="token punctuation">)</span><span class="token punctuation">;</span>\` </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3. PerformanceNavigation接口\`</strong></p><p>PerformanceNavigation接口提供了有关页面导航的信息，如重定向次数、是否通过缓存加载等。它可以帮助开发者了解页面导航过程中的性能指标。</p><p>使用示例：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> navigation <span class="token operator">=</span> window<span class="token punctuation">.</span>performance<span class="token punctuation">.</span>navigation<span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;重定向次数：&#39;</span><span class="token punctuation">,</span> navigation<span class="token punctuation">.</span>redirectCount<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;是否通过缓存加载：&#39;</span><span class="token punctuation">,</span> navigation<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">&#39;是&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;否&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>4. PerformanceEntry接口\`</strong></p><p>PerformanceEntry接口提供了有关特定资源或事件的详细性能信息，如资源加载时间、事件处理时间等。它可以用于监控和分析特定资源或事件的性能。</p><p>使用示例：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 监控资源加载性能</span></span>
<span class="line">window<span class="token punctuation">.</span>performance<span class="token punctuation">.</span><span class="token function">getEntriesByType</span><span class="token punctuation">(</span><span class="token string">&#39;resource&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">entry</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line"> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;资源URL:&#39;</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;资源加载时间:&#39;</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span>duration<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;资源大小:&#39;</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span>transferSize<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 监控事件处理性能</span></span>
<span class="line">window<span class="token punctuation">.</span>performance<span class="token punctuation">.</span><span class="token function">getEntriesByType</span><span class="token punctuation">(</span><span class="token string">&#39;event&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">entry</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line"> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;事件类型:&#39;</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;事件处理时间:&#39;</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span>duration<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些示例展示了Performance API中各个接口的基本用法，开发者可以根据具体需求使用不同的接口来获取更详细和准确的性能信息，并进行相应的优化和分析。</p><h2 id="实际应用场景" tabindex="-1"><a class="header-anchor" href="#实际应用场景"><span>实际应用场景</span></a></h2><h4 id="_1-如何利用performance-api优化网页加载速度" tabindex="-1"><a class="header-anchor" href="#_1-如何利用performance-api优化网页加载速度"><span>1. 如何利用Performance API优化网页加载速度</span></a></h4><ul><li>使用Performance API获取页面加载时间，找出加载时间较长的资源，并进行优化。</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> loadTime <span class="token operator">=</span> window<span class="token punctuation">.</span>performance<span class="token punctuation">.</span>timing<span class="token punctuation">.</span>loadEventEnd <span class="token operator">-</span> window<span class="token punctuation">.</span>performance<span class="token punctuation">.</span>timing<span class="token punctuation">.</span>navigationStart<span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;页面加载时间：&#39;</span><span class="token punctuation">,</span> loadTime<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> resources <span class="token operator">=</span> window<span class="token punctuation">.</span>performance<span class="token punctuation">.</span><span class="token function">getEntriesByType</span><span class="token punctuation">(</span><span class="token string">&#39;resource&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">resources<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">resource</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line"> <span class="token keyword">if</span> <span class="token punctuation">(</span>resource<span class="token punctuation">.</span>duration <span class="token operator">&gt;</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;加载时间较长的资源:&#39;</span><span class="token punctuation">,</span> resource<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token comment">// 进行相应的优化，如压缩、缓存等</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用Performance API监控资源加载性能，找出加载时间较长的资源，并进行优化。</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">window<span class="token punctuation">.</span>performance<span class="token punctuation">.</span><span class="token function">getEntriesByType</span><span class="token punctuation">(</span><span class="token string">&#39;resource&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">entry</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line"> <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span>duration <span class="token operator">&gt;</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;加载时间较长的资源:&#39;</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token comment">// 进行相应的优化，如压缩、缓存等</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-如何利用performance-api监控用户交互性能" tabindex="-1"><a class="header-anchor" href="#_2-如何利用performance-api监控用户交互性能"><span>2. 如何利用Performance API监控用户交互性能：</span></a></h4><ul><li>监控用户点击按钮的交互性能。</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#myButton&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> <span class="token keyword">const</span> interactionTime <span class="token operator">=</span> window<span class="token punctuation">.</span>performance<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> event<span class="token punctuation">.</span>timeStamp<span class="token punctuation">;</span></span>
<span class="line"> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;用户点击交互时间:&#39;</span><span class="token punctuation">,</span> interactionTime<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>监控用户滚动页面的交互性能。</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;scroll&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> <span class="token keyword">const</span> interactionTime <span class="token operator">=</span> window<span class="token punctuation">.</span>performance<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> event<span class="token punctuation">.</span>timeStamp<span class="token punctuation">;</span></span>
<span class="line"> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;用户滚动交互时间:&#39;</span><span class="token punctuation">,</span> interactionTime<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过使用Performance API，开发者可以获取页面加载时间和资源加载性能，从而找出加载时间较长的资源并进行优化。同时，通过监控用户交互性能，开发者可以了解用户与网页的交互体验，并进行相应的优化。这些实际应用场景和示例代码可以帮助开发者更好地利用Performance API来优化网页性能。</p><p>参考文章地址：https://juejin.cn/post/7291586138103038010 MDN: https://developer.mozilla.org/zh-CN/docs/Web/API/Performance_API</p>`,36)]))}const u=s(o,[["render",c],["__file","20230904.html.vue"]]),r=JSON.parse('{"path":"/blogs/Frontend/20230904.html","title":"Performance API简洁及使用","lang":"en-US","frontmatter":{"title":"Performance API简洁及使用","date":"2023-09-04T00:00:00.000Z","author":"angrybird233","tags":["性能优化"],"categories":["Frontend"]},"headers":[{"level":2,"title":"Performance API简介","slug":"performance-api简介","link":"#performance-api简介","children":[]},{"level":2,"title":"window.performance","slug":"window-performance","link":"#window-performance","children":[]},{"level":2,"title":"实际应用场景","slug":"实际应用场景","link":"#实际应用场景","children":[]}],"git":{"createdTime":1734342184000,"updatedTime":1734342184000,"contributors":[{"name":"wanggang","email":"wanggang@shouyinongye.com","commits":1}]},"filePathRelative":"blogs/Frontend/20230904.md"}');export{u as comp,r as data};
